// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	SimpleMessage
	ExecutionStartingRequest
	ExecuteStepRequest
	ExecuteStepResponse
	ExecutionEndingRequest
*/
package main

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type SimpleMessage_MessageType int32

const (
	SimpleMessage_PING    SimpleMessage_MessageType = 0
	SimpleMessage_PONG    SimpleMessage_MessageType = 1
	SimpleMessage_EXIT    SimpleMessage_MessageType = 2
	SimpleMessage_SUCCESS SimpleMessage_MessageType = 3
)

var SimpleMessage_MessageType_name = map[int32]string{
	0: "PING",
	1: "PONG",
	2: "EXIT",
	3: "SUCCESS",
}
var SimpleMessage_MessageType_value = map[string]int32{
	"PING":    0,
	"PONG":    1,
	"EXIT":    2,
	"SUCCESS": 3,
}

func (x SimpleMessage_MessageType) Enum() *SimpleMessage_MessageType {
	p := new(SimpleMessage_MessageType)
	*p = x
	return p
}
func (x SimpleMessage_MessageType) String() string {
	return proto.EnumName(SimpleMessage_MessageType_name, int32(x))
}
func (x *SimpleMessage_MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(SimpleMessage_MessageType_value, data, "SimpleMessage_MessageType")
	if err != nil {
		return err
	}
	*x = SimpleMessage_MessageType(value)
	return nil
}

type SimpleMessage struct {
	MessageType      *SimpleMessage_MessageType `protobuf:"varint,1,req,name=messageType,enum=main.SimpleMessage_MessageType" json:"messageType,omitempty"`
	XXX_unrecognized []byte                     `json:"-"`
}

func (m *SimpleMessage) Reset()         { *m = SimpleMessage{} }
func (m *SimpleMessage) String() string { return proto.CompactTextString(m) }
func (*SimpleMessage) ProtoMessage()    {}

func (m *SimpleMessage) GetMessageType() SimpleMessage_MessageType {
	if m != nil && m.MessageType != nil {
		return *m.MessageType
	}
	return SimpleMessage_PING
}

type ExecutionStartingRequest struct {
	ScenarioFile     *string `protobuf:"bytes,1,req,name=scenarioFile" json:"scenarioFile,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExecutionStartingRequest) Reset()         { *m = ExecutionStartingRequest{} }
func (m *ExecutionStartingRequest) String() string { return proto.CompactTextString(m) }
func (*ExecutionStartingRequest) ProtoMessage()    {}

func (m *ExecutionStartingRequest) GetScenarioFile() string {
	if m != nil && m.ScenarioFile != nil {
		return *m.ScenarioFile
	}
	return ""
}

type ExecuteStepRequest struct {
	StepId           *int32   `protobuf:"varint,1,req,name=stepId" json:"stepId,omitempty"`
	StepText         *string  `protobuf:"bytes,2,req,name=stepText" json:"stepText,omitempty"`
	ScenarioFailing  *bool    `protobuf:"varint,3,req,name=scenarioFailing" json:"scenarioFailing,omitempty"`
	Args             []string `protobuf:"bytes,4,rep,name=args" json:"args,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ExecuteStepRequest) Reset()         { *m = ExecuteStepRequest{} }
func (m *ExecuteStepRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteStepRequest) ProtoMessage()    {}

func (m *ExecuteStepRequest) GetStepId() int32 {
	if m != nil && m.StepId != nil {
		return *m.StepId
	}
	return 0
}

func (m *ExecuteStepRequest) GetStepText() string {
	if m != nil && m.StepText != nil {
		return *m.StepText
	}
	return ""
}

func (m *ExecuteStepRequest) GetScenarioFailing() bool {
	if m != nil && m.ScenarioFailing != nil {
		return *m.ScenarioFailing
	}
	return false
}

func (m *ExecuteStepRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type ExecuteStepResponse struct {
	StepId           *int32  `protobuf:"varint,1,req,name=stepId" json:"stepId,omitempty"`
	Passed           *bool   `protobuf:"varint,2,req,name=passed" json:"passed,omitempty"`
	RecoverableError *bool   `protobuf:"varint,3,opt,name=recoverableError" json:"recoverableError,omitempty"`
	ErrorMessage     *string `protobuf:"bytes,4,opt,name=errorMessage" json:"errorMessage,omitempty"`
	StackTrace       *string `protobuf:"bytes,5,opt,name=stackTrace" json:"stackTrace,omitempty"`
	ScreenShot       []byte  `protobuf:"bytes,6,opt,name=screenShot" json:"screenShot,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExecuteStepResponse) Reset()         { *m = ExecuteStepResponse{} }
func (m *ExecuteStepResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteStepResponse) ProtoMessage()    {}

func (m *ExecuteStepResponse) GetStepId() int32 {
	if m != nil && m.StepId != nil {
		return *m.StepId
	}
	return 0
}

func (m *ExecuteStepResponse) GetPassed() bool {
	if m != nil && m.Passed != nil {
		return *m.Passed
	}
	return false
}

func (m *ExecuteStepResponse) GetRecoverableError() bool {
	if m != nil && m.RecoverableError != nil {
		return *m.RecoverableError
	}
	return false
}

func (m *ExecuteStepResponse) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *ExecuteStepResponse) GetStackTrace() string {
	if m != nil && m.StackTrace != nil {
		return *m.StackTrace
	}
	return ""
}

func (m *ExecuteStepResponse) GetScreenShot() []byte {
	if m != nil {
		return m.ScreenShot
	}
	return nil
}

type ExecutionEndingRequest struct {
	ScenarioFile     *string `protobuf:"bytes,7,req,name=scenarioFile" json:"scenarioFile,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExecutionEndingRequest) Reset()         { *m = ExecutionEndingRequest{} }
func (m *ExecutionEndingRequest) String() string { return proto.CompactTextString(m) }
func (*ExecutionEndingRequest) ProtoMessage()    {}

func (m *ExecutionEndingRequest) GetScenarioFile() string {
	if m != nil && m.ScenarioFile != nil {
		return *m.ScenarioFile
	}
	return ""
}

func init() {
	proto.RegisterEnum("main.SimpleMessage_MessageType", SimpleMessage_MessageType_name, SimpleMessage_MessageType_value)
}
