#!/usr/bin/env ruby
# Generated by the protocol buffer compiler. DO NOT EDIT!

require 'protocol_buffers'

module Main
  # forward declarations
  class ExecutionStartingRequest < ::ProtocolBuffers::Message; end
  class ExecuteStepRequest < ::ProtocolBuffers::Message; end
  class ExecuteStepResponse < ::ProtocolBuffers::Message; end
  class ExecutionEndingRequest < ::ProtocolBuffers::Message; end
  class Message < ::ProtocolBuffers::Message; end

  class ExecutionStartingRequest < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ExecutionStartingRequest"

    required :string, :scenarioFile, 1
  end

  class ExecuteStepRequest < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ExecuteStepRequest"

    required :string, :stepText, 1
    optional :bool, :scenarioFailing, 2
    repeated :string, :args, 3
  end

  class ExecuteStepResponse < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ExecuteStepResponse"

    required :bool, :passed, 2
    optional :bool, :recoverableError, 3
    optional :string, :errorMessage, 4
    optional :string, :stackTrace, 5
    optional :bytes, :screenShot, 6
  end

  class ExecutionEndingRequest < ::ProtocolBuffers::Message
    set_fully_qualified_name "main.ExecutionEndingRequest"

  end

  class Message < ::ProtocolBuffers::Message
    # forward declarations

    # enums
    module MessageType
      include ::ProtocolBuffers::Enum

      set_fully_qualified_name "main.Message.MessageType"

      ExecutionStarting = 0
      ExecuteStep = 1
      ExecuteStepResponse = 2
      ExecutionEnding = 3
    end

    set_fully_qualified_name "main.Message"

    required ::Main::Message::MessageType, :messageType, 1
    required :int64, :messageId, 2
    optional ::Main::ExecutionStartingRequest, :executionStartingRequest, 3
    optional ::Main::ExecuteStepRequest, :executeStepRequest, 4
    optional ::Main::ExecuteStepResponse, :executeStepResponse, 5
    optional ::Main::ExecutionEndingRequest, :executionEndingRequest, 6
  end

end
