// Code generated by protoc-gen-go.
// source: messages.proto
// DO NOT EDIT!

/*
Package main is a generated protocol buffer package.

It is generated from these files:
	messages.proto

It has these top-level messages:
	ExecutionStartingRequest
	ExecuteStepRequest
	ExecuteStepResponse
	ExecutionEndingRequest
	Message
*/
package main

import proto "code.google.com/p/goprotobuf/proto"
import json "encoding/json"
import math "math"

// Reference proto, json, and math imports to suppress error if they are not otherwise used.
var _ = proto.Marshal
var _ = &json.SyntaxError{}
var _ = math.Inf

type Message_MessageType int32

const (
	Message_ExecutionStarting   Message_MessageType = 0
	Message_ExecuteStep         Message_MessageType = 1
	Message_ExecuteStepResponse Message_MessageType = 2
	Message_ExecutionEnding     Message_MessageType = 3
)

var Message_MessageType_name = map[int32]string{
	0: "ExecutionStarting",
	1: "ExecuteStep",
	2: "ExecuteStepResponse",
	3: "ExecutionEnding",
}
var Message_MessageType_value = map[string]int32{
	"ExecutionStarting":   0,
	"ExecuteStep":         1,
	"ExecuteStepResponse": 2,
	"ExecutionEnding":     3,
}

func (x Message_MessageType) Enum() *Message_MessageType {
	p := new(Message_MessageType)
	*p = x
	return p
}
func (x Message_MessageType) String() string {
	return proto.EnumName(Message_MessageType_name, int32(x))
}
func (x *Message_MessageType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Message_MessageType_value, data, "Message_MessageType")
	if err != nil {
		return err
	}
	*x = Message_MessageType(value)
	return nil
}

type ExecutionStartingRequest struct {
	ScenarioFile     *string `protobuf:"bytes,1,req,name=scenarioFile" json:"scenarioFile,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExecutionStartingRequest) Reset()         { *m = ExecutionStartingRequest{} }
func (m *ExecutionStartingRequest) String() string { return proto.CompactTextString(m) }
func (*ExecutionStartingRequest) ProtoMessage()    {}

func (m *ExecutionStartingRequest) GetScenarioFile() string {
	if m != nil && m.ScenarioFile != nil {
		return *m.ScenarioFile
	}
	return ""
}

type ExecuteStepRequest struct {
	StepText         *string  `protobuf:"bytes,1,req,name=stepText" json:"stepText,omitempty"`
	ScenarioFailing  *bool    `protobuf:"varint,2,opt,name=scenarioFailing" json:"scenarioFailing,omitempty"`
	Args             []string `protobuf:"bytes,3,rep,name=args" json:"args,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *ExecuteStepRequest) Reset()         { *m = ExecuteStepRequest{} }
func (m *ExecuteStepRequest) String() string { return proto.CompactTextString(m) }
func (*ExecuteStepRequest) ProtoMessage()    {}

func (m *ExecuteStepRequest) GetStepText() string {
	if m != nil && m.StepText != nil {
		return *m.StepText
	}
	return ""
}

func (m *ExecuteStepRequest) GetScenarioFailing() bool {
	if m != nil && m.ScenarioFailing != nil {
		return *m.ScenarioFailing
	}
	return false
}

func (m *ExecuteStepRequest) GetArgs() []string {
	if m != nil {
		return m.Args
	}
	return nil
}

type ExecuteStepResponse struct {
	Passed           *bool   `protobuf:"varint,2,req,name=passed" json:"passed,omitempty"`
	RecoverableError *bool   `protobuf:"varint,3,opt,name=recoverableError" json:"recoverableError,omitempty"`
	ErrorMessage     *string `protobuf:"bytes,4,opt,name=errorMessage" json:"errorMessage,omitempty"`
	StackTrace       *string `protobuf:"bytes,5,opt,name=stackTrace" json:"stackTrace,omitempty"`
	ScreenShot       []byte  `protobuf:"bytes,6,opt,name=screenShot" json:"screenShot,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *ExecuteStepResponse) Reset()         { *m = ExecuteStepResponse{} }
func (m *ExecuteStepResponse) String() string { return proto.CompactTextString(m) }
func (*ExecuteStepResponse) ProtoMessage()    {}

func (m *ExecuteStepResponse) GetPassed() bool {
	if m != nil && m.Passed != nil {
		return *m.Passed
	}
	return false
}

func (m *ExecuteStepResponse) GetRecoverableError() bool {
	if m != nil && m.RecoverableError != nil {
		return *m.RecoverableError
	}
	return false
}

func (m *ExecuteStepResponse) GetErrorMessage() string {
	if m != nil && m.ErrorMessage != nil {
		return *m.ErrorMessage
	}
	return ""
}

func (m *ExecuteStepResponse) GetStackTrace() string {
	if m != nil && m.StackTrace != nil {
		return *m.StackTrace
	}
	return ""
}

func (m *ExecuteStepResponse) GetScreenShot() []byte {
	if m != nil {
		return m.ScreenShot
	}
	return nil
}

type ExecutionEndingRequest struct {
	XXX_unrecognized []byte `json:"-"`
}

func (m *ExecutionEndingRequest) Reset()         { *m = ExecutionEndingRequest{} }
func (m *ExecutionEndingRequest) String() string { return proto.CompactTextString(m) }
func (*ExecutionEndingRequest) ProtoMessage()    {}

// This is the message which gets transferred all the time
// with proper message type set
type Message struct {
	MessageType *Message_MessageType `protobuf:"varint,1,req,name=messageType,enum=main.Message_MessageType" json:"messageType,omitempty"`
	// A unique id to represent this message. A response to the message should copy over this value
	// this is used to synchronize messages & responses
	MessageId *int64 `protobuf:"varint,2,req,name=messageId" json:"messageId,omitempty"`
	// One of the following will have a value
	ExecutionStartingRequest *ExecutionStartingRequest `protobuf:"bytes,3,opt,name=executionStartingRequest" json:"executionStartingRequest,omitempty"`
	ExecuteStepRequest       *ExecuteStepRequest       `protobuf:"bytes,4,opt,name=executeStepRequest" json:"executeStepRequest,omitempty"`
	ExecuteStepResponse      *ExecuteStepResponse      `protobuf:"bytes,5,opt,name=executeStepResponse" json:"executeStepResponse,omitempty"`
	ExecutionEndingRequest   *ExecutionEndingRequest   `protobuf:"bytes,6,opt,name=executionEndingRequest" json:"executionEndingRequest,omitempty"`
	XXX_unrecognized         []byte                    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}

func (m *Message) GetMessageType() Message_MessageType {
	if m != nil && m.MessageType != nil {
		return *m.MessageType
	}
	return Message_ExecutionStarting
}

func (m *Message) GetMessageId() int64 {
	if m != nil && m.MessageId != nil {
		return *m.MessageId
	}
	return 0
}

func (m *Message) GetExecutionStartingRequest() *ExecutionStartingRequest {
	if m != nil {
		return m.ExecutionStartingRequest
	}
	return nil
}

func (m *Message) GetExecuteStepRequest() *ExecuteStepRequest {
	if m != nil {
		return m.ExecuteStepRequest
	}
	return nil
}

func (m *Message) GetExecuteStepResponse() *ExecuteStepResponse {
	if m != nil {
		return m.ExecuteStepResponse
	}
	return nil
}

func (m *Message) GetExecutionEndingRequest() *ExecutionEndingRequest {
	if m != nil {
		return m.ExecutionEndingRequest
	}
	return nil
}

func init() {
	proto.RegisterEnum("main.Message_MessageType", Message_MessageType_name, Message_MessageType_value)
}
